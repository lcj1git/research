#!/bin/bash
#run rhf stability calculation using gaussian
#writes rhf E, rhf HOMO-1 -> LUMO+1 E's, RRHF,CRHF,RUHF hessian eigenvalues

declare -i linenum
declare -a linenumarr
declare -a evals
declare -x step=0.25 #in alpha (degrees), not y
declare -i keepgoing=1
declare -i keeplooking=1
#vars for distortion param 
declare -x alpha=5
declare -x alphaf=85
declare -x y
declare -a sigpts
declare -x tinystep=0.01
declare -x dist
declare -i gt0
declare -i usefinemesh
#output files and gaussian files
gauss=gdv
comfile='h10.com'
logfile='h10.log'
hessfile='h10hess'
occmofile='h10occMOE'
virtmofile='h10virtMOE'
ghfefile='h10GHFE'

mkdir com log

#loop for highsymm->yi
while [ $keepgoing -eq 1 ]; do
#create input file for gaussian
	echo $alpha > tmp
        ./writez < tmp > $comfile
	y=$(grep -o -E '\-*[0-9]+\.[0-9]*' fort.8)
	rm tmp fort.8
#run gaussian
	cp guess.chk h10.chk
	$gauss < $comfile >& $logfile
	if [ -f Gau*.int ]; then
		rm Gau*
	fi
#	$gauss $comfile
#get hessian eigenvalues
	string=$(grep -n 'GHF stability matrix Eigenvalues:' $logfile)
	linenum=$(echo $string | grep -o -E '[0-9]+')
	linenum=$(echo $linenum + 11 | bc)
	string=$(head -$linenum $logfile | tail -10)
	string=$(echo $string | grep -o -E "\-*[0-9]+\.[0-9]*")
	evals=($string)
	echo $alpha $y ${evals[@]} >> $hessfile
#get UHF E
        estring=$(grep 'E(GHF)' $logfile)
        estring=$(echo $estring | grep -o -E '\-*[0-9]+\.[0-9]*')
        echo $alpha $y $estring >> $ghfefile
#get UHF MO E
	occmo=$(grep 'Occ. eigenvalues --' $logfile)
	occmo=$(echo $occmo | grep -o -E '\-*[0-9]+\.[0-9]+')
	virtmo=$(grep 'Virt. eigenvalues --' $logfile)
	virtmo=$(echo $occmo | grep -o -E '\-*[0-9]+\.[0-9]+')
	echo $alpha $y $occmo >> $occmofile
	echo $alpha $y $virtmo >> $virtmofile
#save com and log files
	cp $comfile 'com/'$comfile'_alpha'$alpha
	cp $logfile 'log/'$logfile'_alpha'$alpha
#check if near significant point, if so use finer mesh
        usefinemesh=0
        for p in "${sigpts[@]}"
        do
# take abs val of the distance between alpha and p
                dist=$(echo $alpha - $p | bc)
                gt0=$(echo "$dist > 0.0" | bc -l)
                if [ $gt0 -eq 0 ] # if dist < 0, multiply by -1
                then
                        dist=$(bc <<< "scale=6; -1 *  $dist ")
                fi
                if [ $usefinemesh -eq 0 ] #only reset usefinemesh if it is 0/false. if true do not modify. 
                then
                        usefinemesh=$(echo "0.25 > $dist" | bc -l) #usefinemesh is 1/true if .1 > dist
                fi
        done
        if [ $usefinemesh -eq 1 ]
        then
                alpha=$(echo $alpha + $tinystep | bc)
        else
                alpha=$(echo $alpha + $step | bc)
        fi

#check if y is less than yi, if so keepgoing = 0, if not keepgoing = 1.
        keepgoing=$(echo "$alphaf > $alpha" | bc -l)
#end loop
done
